import os
from dotenv import load_dotenv
from telegram import Update, InlineQueryResultGame
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackContext,
    CallbackQueryHandler,
    InlineQueryHandler
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üêç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ó–º–µ–π–∫—É!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/play - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/help - –ü–æ–º–æ—â—å"
    )

async def play(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–≥—Ä—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ /play"""
    try:
        await update.message.reply_game(game_short_name="snake_game")
    except Exception as e:
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞: {e}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –∏–≥—Ä–∞ –≤ @BotFather")

async def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–≥—Ä–µ:\n"
        "–°—Ç—Ä–µ–ª–∫–∏ ‚Üê ‚Üë ‚Üí ‚Üì\n\n"
        "üîπ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/play - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )

async def game_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–≥—Ä—É"""
    query = update.callback_query
    await query.answer()
    
    # URL –≤–∞—à–µ–π –∏–≥—Ä—ã –Ω–∞ GitHub Pages
    game_url = "https://dizzyz7.github.io/telegram-snake-game/snake_game.html"
    
    await query.edit_message_text(
        text=f"üéÆ [–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å]({game_url})",
        parse_mode='Markdown'
    )

async def inline_query(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.inline_query
    if not query:
        return
        
    results = [
        InlineQueryResultGame(
            id="1",
            game_short_name="snake_game",
            reply_markup=None
        )
    ]
    await query.answer(results)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("play", play))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(game_handler, pattern="^snake_game$"))
    application.add_handler(InlineQueryHandler(inline_query))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
